<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="https://website.jingxiqiu.com/feed_style.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh">
    <tabi:metadata xmlns:tabi="https://github.com/welpo/tabi">
        <tabi:base_url>https:&#x2F;&#x2F;website.jingxiqiu.com</tabi:base_url>
        <tabi:separator>
            •
        </tabi:separator>
        <tabi:about_feeds>这是Web Feed，又称为Atom Feed，把现在的网址复制到新闻阅读器即可订阅本站文章。造访「About Feeds」来了解更多资讯。</tabi:about_feeds>
        <tabi:visit_the_site>造访网站</tabi:visit_the_site>
        <tabi:recent_posts>近期文章</tabi:recent_posts>
        <tabi:last_updated_on>更新于 $DATE</tabi:last_updated_on>
        <tabi:default_theme></tabi:default_theme>
        <tabi:post_listing_date>date</tabi:post_listing_date>
        <tabi:current_section>仇镜溪的博客</tabi:current_section>
    </tabi:metadata><title>仇镜溪的博客</title>
    <link href="https://website.jingxiqiu.com/zh/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://website.jingxiqiu.com/zh/" rel="alternate" type="text/html"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    
    
    <updated>2025-07-01T00:00:00Z</updated>
    <id>https://website.jingxiqiu.com/zh/atom.xml</id><entry xml:lang="zh">
        <title>从 NotionNext 转到 Zola：迁移笔记</title>
        <published>2025-07-01T00:00:00+00:00</published>
        <updated>2025-07-01T00:00:00+00:00</updated>
        <author>
            <name>Jingxi Qiu</name>
        </author>
        <link rel="alternate" href="https://website.jingxiqiu.com/zh/blog/zola-migration/" type="text/html"/>
        <id>https://website.jingxiqiu.com/zh/blog/zola-migration/</id>
        
            <content type="html">&lt;p&gt;迁移原因、操作脚本、常见报错修复……&lt;&#x2F;p&gt;
&lt;h1 id=&quot;cong-notionnextqian-yi-dao-zola&quot;&gt;从NotionNext迁移到Zola&lt;&#x2F;h1&gt;
&lt;p&gt;最近把个人网站从NotionNext迁移到了Zola，分享一点个人看法。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qian-yao&quot;&gt;前要&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;notionnextshi-yong-ti-yan&quot;&gt;NotionNext使用体验&lt;&#x2F;h3&gt;
&lt;p&gt;此前我使用NotionNext托管个人博客，Notion确实是一个非常好的文本编辑软件，编写起文章来非常流畅，而且有一个软件可以随时随地点开即写并且全平台同步，只要保存设置为发布就能在前端显示新的文章。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qian-yi-yuan-yin&quot;&gt;迁移原因&lt;&#x2F;h3&gt;
&lt;p&gt;当文章多起来后，NotionNext对于文章的管理对我个人而言就不是那么得心应手了，这将导致Notion数据库庞大且难以维护。同时考虑到我也有前端开发经验，在Zola等静态网站生成器中使用css对于前端进行管理相较于NotionNext在文本编辑器中进行修改更为直观便捷。考虑到对文章管理，自定义内容把控，多语言支持，我决定把博客托管软件迁移到Zola。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qian-yi-guo-cheng&quot;&gt;迁移过程&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;zolaan-zhuang&quot;&gt;Zola安装&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;getting-started&#x2F;installation&#x2F;&quot;&gt;Zola的官方文档&lt;&#x2F;a&gt;写的挺清晰明了的，对于本地Zola的开发环境基本只需要一条指令便能一键安装。唯一要注意的是如果要支持中文&#x2F;日文的话，需要额外打包二进制索引，否则站内搜索功能对该语言将不可用。本地安装和github action编译含中文的Zola可以见文章：&lt;a href=&quot;#&quot;&gt;让Zola支持中文索引&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我的配置是本地windows开发，Github Page部署。博客的代码在仓库A，然后通过action部署到公开的仓库B，然后推送到github Page上。


&lt;noscript&gt;
    &lt;strong&gt;⚠️ JavaScript is required to render the diagram.&lt;&#x2F;strong&gt;
&lt;&#x2F;noscript&gt;
&lt;pre class=&quot;mermaid invertible-image&quot;&gt;
    flowchart TD
    %% ---- 节点 ----
    subgraph Local[&quot;本地开发环境&quot;]
        W[Windows 本地开发]
    end

    subgraph GitHub[&quot;GitHub&quot;]
        A[Repo A（博客源代码）]
        GA[GitHub Actions（CI&#x2F;CD）]
        B[Repo B（静态站点文件）]
        GP[GitHub Pages（线上托管）]
    end

    U[访客 &#x2F; 浏览器]

    %% ---- 连线 ----
    W  --&gt;|git push| A
    A  --&gt;|触发 workflow| GA
    GA --&gt;|build 静态文件 → push| B
    B  --&gt;|gh-pages 分支| GP
    U  --&gt;|HTTPS 请求| GP

    %% ---- 样式（可选）----
    classDef local  fill:#e5e5e5,stroke:#888,stroke-width:1px,rx:6,ry:6;
    classDef repo   fill:#fef6e4,stroke:#a9a9a9,stroke-width:1px,rx:6,ry:6;
    classDef action fill:#cbf3f0,stroke:#0096c7,stroke-width:1px,rx:6,ry:6;
    classDef page   fill:#ffd6a5,stroke:#ff8800,stroke-width:1px,rx:6,ry:6;

    class W local;
    class A,B repo;
    class GA action;
    class GP page;

    linkStyle default stroke-width:2px;
&lt;&#x2F;pre&gt;
&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wen-zhang-jie-gou-shuang-yu-zhi-chi&quot;&gt;文章结构 - 双语支持&lt;&#x2F;h3&gt;
&lt;p&gt;正常情况下，博客可以直接用以下结构：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; class=&quot;language-text z-code&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;content&#x2F;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;└── blog&#x2F;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    ├── 2025-07-01-zola-migration.md
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    ├── 2025-06-20-new-feature.md
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    └── 2025-05-10-performance-tips.md
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但是如果需要双语则需要创建对应的多语言文件，比如我站点的主语言设置为英文(en)，而我想其支持中文(zh)，我需要创建一个&lt;code&gt;index.zh.md&lt;&#x2F;code&gt;文件来让zola获取对应的中文版本。我选择的是这种结构：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; class=&quot;language-text z-code&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;content&#x2F;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;└── blog&#x2F;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    ├── 2025-07-01-zola-migration&#x2F;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    │   ├── index.md
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    │   └── index.zh.md
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    ├── 2025-06-20-new-feature&#x2F;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    │   ├── index.md
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    │   └── index.zh.md
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    └── 2025-05-10-performance-tips&#x2F;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        ├── index.md
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        └── index.zh.md
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样Zola能识别到2025-07-01-zola-migration下包含en（主语言）和zh两种语言，缺失不会导致报错，但是在对应语言下不会显示这篇文章。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wen-zhang-qian-yi&quot;&gt;文章迁移&lt;&#x2F;h3&gt;
&lt;p&gt;目前把文章从NotionNext迁移过来的方法，还是手动把文章通过markdown导出，然后在zola里手动修改。后面可能考虑Notion编辑器到markdown的自动化流程。&lt;&#x2F;p&gt;
</content>
        <summary type="html">记录把个人站从 NotionNext 迁移到 Zola 的完整流程</summary>
        </entry><entry xml:lang="zh">
        <title>Poetry installation and usage</title>
        <published>2024-09-22T00:00:00+00:00</published>
        <updated>2024-09-22T00:00:00+00:00</updated>
        <author>
            <name>Jingxi Qiu</name>
        </author>
        <link rel="alternate" href="https://website.jingxiqiu.com/zh/blog/poetry-install-and-usage/" type="text/html"/>
        <id>https://website.jingxiqiu.com/zh/blog/poetry-install-and-usage/</id>
        
            <content type="html">&lt;h1 id=&quot;poetryshi-yong&quot;&gt;Poetry使用&lt;&#x2F;h1&gt;
&lt;!-- 
type: Post
status: Published
date: 2024&#x2F;09&#x2F;22
tags: Portry, Python, 学习 --&gt;
&lt;aside&gt;
😀 简单记录poetry的使用和文档内的一些信息
&lt;&#x2F;aside&gt;
&lt;h2 id=&quot;an-zhuang&quot;&gt;安装&lt;&#x2F;h2&gt;
&lt;p&gt;官方安装教程写的挺好的，推荐使用pipx安装。poetry安装一般不会存在什么问题，只要pipx能够正常安装。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;python-poetry.org&#x2F;docs&#x2F;#installing-with-pipx&quot;&gt;官方安装教程&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ji-chu-yong-fa&quot;&gt;基础用法&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;chuang-jian-yi-ge-xiang-mu&quot;&gt;创建一个项目&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;poetry new poetry-demo&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Poetry assumes your package contains a package with the same name as &lt;strong&gt;&lt;code&gt;tool.poetry.name&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt; located in the root of your project. If this is not the case, populate &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;python-poetry.org&#x2F;docs&#x2F;pyproject&#x2F;#packages&quot;&gt;&lt;strong&gt;&lt;code&gt;tool.poetry.packages&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to specify your packages and their locations.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在pyproject.toml配置文件中，&lt;code&gt;tool.poetry.name&lt;&#x2F;code&gt;需要与name=””相同，如果不同的话则需要通过&lt;code&gt;tool.poetry.packages&lt;&#x2F;code&gt;指定&lt;&#x2F;p&gt;
&lt;p&gt;例如:&lt;&#x2F;p&gt;
&lt;p&gt;项目结构：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;my_project&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;├──&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; my_project&#x2F;  &lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; This is the directory where your package code is located&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;│&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;   ├── __init__.py  &lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; Makes it a package&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;│&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;   ├── some_module.py&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;└──&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; pyproject.toml&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;与name相同&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;toml&quot; class=&quot;language-toml z-code&quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;tool&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;my_project&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;与name不相同，通过tool.poetry.packages指定&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;toml&quot; class=&quot;language-toml z-code&quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;tool&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;my_project&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;tool&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;packages&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;include&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;src&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;xiang-mu-yi-jing-cun-zai-shi-yong-poetryguan-li&quot;&gt;项目已经存在，使用poetry管理&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-cd z-shell&quot;&gt;cd&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; pre-existing-project&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; init&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;poetryyi-lai-xiang&quot;&gt;Poetry依赖项&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;an-zhuang-yi-lai-xiang&quot;&gt;安装依赖项&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;修改toml文件&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;toml&quot; class=&quot;language-toml z-code&quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;tool&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;pendulum&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;^2.1&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;命令行add，这会自动执行install&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; add pendulum&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;poetryyi-lai-xiang-zhi-chi-ge-shi&quot;&gt;poetry依赖项支持格式&lt;&#x2F;h3&gt;
&lt;p&gt;poetry支持多种依赖格式&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;caret&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ex. &lt;code&gt;^1.2.3&lt;&#x2F;code&gt; → &lt;code&gt;&amp;gt;=1.2.3 &amp;lt;2.0.0&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;tilde&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ex. &lt;code&gt;~1.2.3&lt;&#x2F;code&gt; → &lt;code&gt;&amp;gt;=1.2.3 &amp;lt;1.3.0&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;wildcard&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ex. &lt;code&gt;1.*&lt;&#x2F;code&gt; → &lt;code&gt;&amp;gt;=1.0.0 &amp;lt;2.0.0&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Inequality&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ex. &lt;code&gt;&amp;gt;= 1.2.0&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当使用&lt;code&gt;poetry add&lt;&#x2F;code&gt;的时候可以使用&lt;code&gt;@&lt;&#x2F;code&gt;命令符，它等效于&lt;code&gt;==&lt;&#x2F;code&gt;，但是也可以使用poetry的修饰符&lt;&#x2F;p&gt;
&lt;p&gt;ex.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; add django@^4.0.0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; add django@latest&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; add django&lt;span class=&quot;z-keyword z-control z-regexp z-set z-begin z-shell&quot;&gt;[&lt;&#x2F;span&gt;bcrypt&lt;span class=&quot;z-keyword z-control z-regexp z-set z-end z-shell&quot;&gt;]&lt;&#x2F;span&gt;@^4.0.0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;guan-li-yi-lai-xiang&quot;&gt;管理依赖项&lt;&#x2F;h3&gt;
&lt;p&gt;Poetry提供了通过组(group)的方法管理项目依赖项。你可以通过它来管理比如只是给测试使用的依赖项。&lt;&#x2F;p&gt;
&lt;p&gt;你可以使用&lt;code&gt;tool.poetry.group.&amp;lt;group&amp;gt;&lt;&#x2F;code&gt;来声明一个依赖组(dependency group)&lt;&#x2F;p&gt;
&lt;p&gt;例如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;[tool.poetry.group.test]  &lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; This part can be left out&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;[tool.poetry.group.test.dependencies]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;pytest&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; = &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;^6.0.0&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;pytest-mock&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; = &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;*&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这样将&lt;code&gt;pytest&lt;&#x2F;code&gt;,&lt;code&gt;pytest-mock&lt;&#x2F;code&gt;这些用于测试的库使用&lt;code&gt;test&lt;&#x2F;code&gt;组来管理&lt;&#x2F;p&gt;
&lt;p&gt;Poetry文档注明：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;依赖组（隐式组除外**&lt;code&gt;main&lt;&#x2F;code&gt;**）必须仅包含您在开发过程中需要的依赖项。只有使用 Poetry 才能安装它们。要声明一组依赖项，以便在运行时向项目添加附加功能，请改用&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;python-poetry.org&#x2F;docs&#x2F;pyproject&#x2F;#extras&quot;&gt;&lt;strong&gt;extras&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;。最终用户可以使用 安装 Extras &lt;strong&gt;&lt;code&gt;pip&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;向依赖组里添加依赖项&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;使用&lt;code&gt;poetry add&lt;&#x2F;code&gt;来添加依赖项时，添加&lt;code&gt;—group(-G)&lt;&#x2F;code&gt;参数&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; add pytest&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;group&lt;&#x2F;span&gt; test&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果依赖组不存在，则会自动创建&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;从组里删除依赖项&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;使用&lt;code&gt;poetry remove&lt;&#x2F;code&gt;从特定组中删除软件包&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; remove mkdocs&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;group&lt;&#x2F;span&gt; docs&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;建立可选组&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以对组添加&lt;code&gt;optional=true&lt;&#x2F;code&gt;来指定一个组为可选，在&lt;code&gt;poetry install&lt;&#x2F;code&gt;的时候该组不会被自动安装&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; class=&quot;language-toml z-code&quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;tool&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;group&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;docs&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;optional&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-toml&quot;&gt;true&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;tool&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;group&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;docs&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;mkdocs&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;*&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;安装&#x2F;不安装组&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;默认情况下，除非表明可选(optional)的组，其余的都会被&lt;code&gt;poetry install&lt;&#x2F;code&gt;自动安装&lt;&#x2F;p&gt;
&lt;p&gt;可以使用&lt;code&gt;—with&lt;&#x2F;code&gt;或者&lt;code&gt;—without&lt;&#x2F;code&gt;来指定安装或者不安装一些依赖组&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; install&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;with&lt;&#x2F;span&gt; docs&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; install&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;without&lt;&#x2F;span&gt; test,docs&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当一起使用时，&lt;code&gt;--without&lt;&#x2F;code&gt;优先于&lt;code&gt;--with&lt;&#x2F;code&gt;。例如，以下命令将仅安装可选&lt;code&gt;test&lt;&#x2F;code&gt;组中指定的依赖项。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; install&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;with&lt;&#x2F;span&gt; test,docs&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;without&lt;&#x2F;span&gt; docs&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果只想安装项目的运行时依赖项，则可以使用以下 &lt;code&gt;--only main&lt;&#x2F;code&gt;表示法：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; install&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;only&lt;&#x2F;span&gt; main&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果想要安装项目根目录，并且不需要其他依赖项，则可以使用该&lt;code&gt;--only-root&lt;&#x2F;code&gt;选项。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; install&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;only-root&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;同步——安装依赖项，删除多余的包&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Poetry 支持所谓的依赖项同步。依赖项同步可确保**&lt;code&gt;poetry.lock&lt;&#x2F;code&gt;**文件中锁定的依赖项是环境中唯一存在的依赖项，从而删除所有不必要的依赖项。&lt;&#x2F;p&gt;
&lt;p&gt;可以在&lt;code&gt;poetry install&lt;&#x2F;code&gt;时使用&lt;code&gt;—sync&lt;&#x2F;code&gt;参数&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; install&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;sync&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个命令会有以下作用:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;删除多余软件包&lt;&#x2F;li&gt;
&lt;li&gt;安装缺少软件包&lt;&#x2F;li&gt;
&lt;li&gt;更新过时软件包&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;它可以与&lt;code&gt;—with&lt;&#x2F;code&gt;，&lt;code&gt;—without&lt;&#x2F;code&gt;一起使用&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; install&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;without&lt;&#x2F;span&gt; dev&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;sync&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; install&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;with&lt;&#x2F;span&gt; docs&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;sync&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;poetry&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; install&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;only&lt;&#x2F;span&gt; dev&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;主要依赖项总是会被安装，例如有[main] [dev] [docs]，当执行&lt;code&gt;poetry install --with docs --sync&lt;&#x2F;code&gt;时，[main]和[docs]会被安装，而[dev]会被省略&lt;&#x2F;p&gt;
</content>
        <summary type="html">Poetry installation and usage</summary>
        </entry><entry xml:lang="zh">
        <title>LLM Scaling Laws 论文摘录 - Scaling Laws for Neural Language Models</title>
        <published>2024-03-20T00:00:00+00:00</published>
        <updated>2024-03-20T00:00:00+00:00</updated>
        <author>
            <name>Jingxi Qiu</name>
        </author>
        <link rel="alternate" href="https://website.jingxiqiu.com/zh/blog/scaling-law/" type="text/html"/>
        <id>https://website.jingxiqiu.com/zh/blog/scaling-law/</id>
        
            <content type="html">&lt;h1 id=&quot;llm-scaling-laws-lun-wen-zhai-lu-scaling-laws-for-neural-language-models&quot;&gt;LLM Scaling Laws 论文摘录 - Scaling Laws for Neural Language Models&lt;&#x2F;h1&gt;
&lt;p&gt;type: Post
status: Published
date: 2024&#x2F;03&#x2F;20
tags: AI, LLM, NLP, 论文摘录
category: 技术分享&lt;&#x2F;p&gt;
&lt;aside&gt;
✋ 许多人都认为大模型的性能和模型的结构、大小、训练计算量、数据集大小有关，但是究竟这些因素如何影响大模型的最终性能？了解这些可以帮助更好地决定究竟投入那些资源来训练所需的模型
&lt;&#x2F;aside&gt;
&lt;h1 id=&quot;bei-jing-he-nei-rong&quot;&gt;背景和内容&lt;&#x2F;h1&gt;
&lt;p&gt;OpenAI在2020年发布了《Scaling Laws for Neural Language Models》探讨Scaling Laws（缩放法则），在其中探讨了对于基于Transformerde的大模型的Training Loss与模型参数规模N，数据集大小D，计算量C之间的联系。&lt;&#x2F;p&gt;
&lt;p&gt;而在2022年四月谷歌DeepMind在文章《Training Compute-Optimal Large Language Models》中重新讨论了Scaling Laws，他们指出当前的大模型都明显缺乏足够的训练，在使用四倍的数据（相较于280B参数Gopher)训练70B的Chinchilla后取得了更好的成绩（SOTA average accuracy of 67.5% on the MMLU benchmark, 7% increasement）。&lt;&#x2F;p&gt;
&lt;p&gt;然而，在2023年二月由&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;espadrine.github.io&#x2F;&quot;&gt;&lt;em&gt;Thaddée Tyl&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;发布的博客《Chinchilla’s Death》（Chinchilla之死)中，指出，只要训练足够长时间，小模型也能超过大模型。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;lun-wen&quot;&gt;论文&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;scaling-laws-for-neural-language-models&quot;&gt;Scaling Laws for Neural Language Models&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;zhu-yao-fa-xian&quot;&gt;主要发现&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;模型性能随模型大小N,数据大小D和计算量大小C的增加而提高，和模型形状（深度宽度）与自注意力头弱相关&lt;&#x2F;li&gt;
&lt;li&gt;在其他因素不受限的情况下，模型大小N、数据大小D、计算量大小C与性能存在幂律关系&lt;&#x2F;li&gt;
&lt;li&gt;同时扩大模型大小N和数据大小D可以提升模型性能，但是文章研究认为当模型大小增加8倍时，数据大小只需要增加5倍，这种情况下不会受到性能惩罚&lt;&#x2F;li&gt;
&lt;li&gt;由于训练曲线遵从幂律关系，损失与模型大小无关，因此我们可以大致预测后续训练的损失&lt;&#x2F;li&gt;
&lt;li&gt;？在迁移到另一个与训练集不同的数据集上时存在一个惩罚（更大的误差），但是这一个惩罚是恒定的，这意味着其他的提升是共通的&lt;&#x2F;li&gt;
&lt;li&gt;大模型相对于小模型有更高的样本效率（sample-effcient），达到相同的水平只需要使用更少的训练(Figure 2)和更少的数据(Figure 4)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;website.jingxiqiu.com&#x2F;zh&#x2F;blog&#x2F;scaling-law&#x2F;Untitled.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;website.jingxiqiu.com&#x2F;zh&#x2F;blog&#x2F;scaling-law&#x2F;Untitled%201.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;收敛是低效的，在计算量大小C固定时，可以在模型没完全收敛之前停止训练来获取最佳性能(Figure 3)。论文给出参考关系为$D\sim C^{0.27}$&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;website.jingxiqiu.com&#x2F;zh&#x2F;blog&#x2F;scaling-law&#x2F;Untitled%202.png&quot; alt=&quot;这张图体现了在相同的计算量大小C的情况下，来自于不同因素究竟有多少贡献。首先是模型大小，其次是数据（通过更大的batch size和减少复用），而Serial Steps（更多的训练次数）帮助并不大&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这张图体现了在相同的计算量大小C的情况下，来自于不同因素究竟有多少贡献。首先是模型大小，其次是数据（通过更大的batch size和减少复用），而Serial Steps（更多的训练次数）帮助并不大&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;训练的理想batch size应该是训练的幂，并通过梯度噪音尺度（gradient noise scale）继续确定&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;scaling-law-zong-jie&quot;&gt;Scaling Law 总结&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;non-embedding parameters $N$&lt;&#x2F;p&gt;
&lt;p&gt;the dataset size $D$&lt;&#x2F;p&gt;
&lt;p&gt;optimally allocated compute budget $C_{min}$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;参数含义&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;$L$ – the cross entropy loss in nats. Typically it will be averaged over the tokens in a context, but in some cases we report the loss for specific tokens within the context.&lt;&#x2F;li&gt;
&lt;li&gt;$N$ – the number of model parameters, excluding all vocabulary and positional embeddings&lt;&#x2F;li&gt;
&lt;li&gt;$C$ $≈ 6NBS$ – an estimate of the total non-embedding training compute, where $B$ is the batch size, and $S$ is the number of training steps (ie parameter updates). We quote numerical values in PF-days, where one $\text{PF-day}= 10^{15} × 24 × 3600 = 8.64 × 10^{19}$ floating point operations.&lt;&#x2F;li&gt;
&lt;li&gt;$D$ – the dataset size in tokens&lt;&#x2F;li&gt;
&lt;li&gt;$B_{crit}$ – the critical batch size [MKAT18], defined and discussed in Section 5.1. Training at the critical batch size provides a roughly optimal compromise between time and compute efficiency.&lt;&#x2F;li&gt;
&lt;li&gt;$C_{min}$ – an estimate of the minimum amount of non-embedding compute to reach a given value of the loss. This is the training compute that would be used if the model were trained at a batch size much less than the critical batch size.&lt;&#x2F;li&gt;
&lt;li&gt;$S_{min}$ – an estimate of the minimal number of training steps needed to reach a given value of the loss. This is also the number of training steps that would be used if the model were trained at a batch size much greater than the critical batch size.&lt;&#x2F;li&gt;
&lt;li&gt;$\alpha_X$ – power-law exponents for the scaling of the loss as $L(X) ∝ 1&#x2F;X^{α_X}$ where X can be any of $N, D, C, S, B, C^{min}$.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在其他两因素不受限的情况下，测试损失可以由以下公式预测：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;N受限&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;$$
\begin{equation} L(N)=(N_c&#x2F;N)^{\alpha_N} \end{equation}&lt;br &#x2F;&gt;
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\alpha_N \sim 0.076,N_c \sim 8.8 \times 10^{13} \text{(non-embedding parameters)}
$$&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;D受限（with early stopping)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;$$
\begin{equation} L(D)=(D_c&#x2F;D)^{\alpha_D} \end{equation}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\alpha_D \sim 0.095, D_c \sim 5.4 \times 10^{13}\text{(tokens)}
$$&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;C受限&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;$$
\begin{equation}L(C_{min})=(C^{min}&lt;em&gt;c&#x2F;C&lt;&#x2F;em&gt;{min})^{\alpha_{min}} \end{equation}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\alpha_C^{min} \sim 0.050, C^{min}_c \sim 3.1 \times 10^8 \text{(PF-days)}
$$&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;公式含义：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在以上三个公式中,$\alpha_N, \alpha_D, \alpha_C^{min}$给出了当我们提升$N,D,C_{min}$时性能提升的幂次。&lt;&#x2F;p&gt;
&lt;p&gt;举个例子，当我们将模型的参数量提升到两倍时，模型的损失将会减小，$2_{-\alpha_N}\approx 0.95$，因此损失将会是此前的0.95倍。而$N_C,D_C,C_C^{min}$的准确数字基于字典大小和tokenization因此没有实际意义，只代表数量级关系。&lt;&#x2F;p&gt;
&lt;p&gt;此外，文章还提到了batch size和loss的关系&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{equation}B_{crit}(L)=\frac{B_*}{L^{1&#x2F;a_B}} \end{equation}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
B_* \sim 2\cdot10^8 \text{tokens}, \alpha_B\sim0.21
$$&lt;&#x2F;p&gt;
&lt;p&gt;根据此前公式(1)和公式(2)可以得出，当我们提升模型大小时，我们应相应地增加数据集的数量，可以根据计算得出$D\propto N^{\frac{\alpha_{N}}{\alpha_D}} \sim N^{0.74}$。他们还发现一个结合(1)和(2)的公式来控制N和D的依赖以及控制过拟合：&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{equation}L(N,D)=\left[\left(\frac{N_c}{N}^{\frac{\alpha_N}{\alpha_D}}+\frac{D_c}{D} \right)  \right]^{\alpha_D}\end{equation}
$$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;作者推测这个函数也能生成其他生成式任务的最大对数似然&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;训练的曲线也可以由训练step数得出，因此可以求得最佳训练step数&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{equation}L(N,S)=\left(\frac{N_c}{N}\right)^{\alpha{N}}+\left(\frac{S_c}{S_{min}(S)}\right)^{\alpha_S}\end{equation}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$S_c \approx 2.1 \times 10^3,\alpha_S \approx 0.76$
$S_{min}(S)$ is the minimum possible number of optimization steps (parameter updates) estimated using Equation&lt;&#x2F;p&gt;
&lt;p&gt;在固定计算量C的情况下，又得出了以下关系公式&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{equation}N \propto C^{\alpha^{min}_C &#x2F;\alpha_N}, B \propto C^{\alpha^{min}_C &#x2F;\alpha_B}, S \propto C^{\alpha^{min}_C &#x2F;\alpha_S}, D = B \cdot S\end{equation}
$$&lt;&#x2F;p&gt;
&lt;p&gt;此处有&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{equation}\alpha^{min}_C=1&#x2F;(1&#x2F;\alpha_S+1&#x2F;\alpha_B+1&#x2F;\alpha_N)\end{equation}
$$&lt;&#x2F;p&gt;
&lt;p&gt;可得$N \propto C^{0.73}&lt;em&gt;{min}, B \propto C^{0.24}&lt;&#x2F;em&gt;{min},\text{ and }S \propto C^{0.03}_{min}$，此处提出观点：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;当计算量C预算提升的时候，应该主要将其用于更大的模型，而不是更多的训练时间和数据大小。&lt;&#x2F;li&gt;
&lt;li&gt;同时当模型变得更大时，他们变得更加sample efficient。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;yan-jiu-fang-fa&quot;&gt;研究方法&lt;&#x2F;h3&gt;
&lt;p&gt;研究在数据集WebText2及其拓展（$2.29\times 10^{10}$ tokens)，tokenize方法为 byte-pair encoding，词汇大小$n_{vocab}=50257$，性能指标（Loss）为在1024个token上下文的中的交叉熵损失。模型使用的是decoder-only的Transformer，同时训练了LSTM和其他类型的Transformer作为比对。&lt;&#x2F;p&gt;
&lt;p&gt;除特别说明外，模型的训练使用了Adam优化器和$2.5 \times 10^5$步，batch size为512，上下文512 token。由于内存限制，最大的模型使用了Adafactor优化器。&lt;&#x2F;p&gt;
&lt;p&gt;除特别说明外，训练的学习率是一个3000步的热身和一个cosine decay余弦衰减到零。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;模型的参数计算方法&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;为了计算模型参数和计算量，模型的超参数定义为：&lt;&#x2F;p&gt;
&lt;p&gt;| $n_{layer}$ | 层数
number of layers |
| — | — |
| $d_{model}$ | 残差流的维度
dimension of the residual stream |
| $d_{ff}$ | 前馈层（全连接）的维度
dimension of the intermediate feed-forward layer |
| $d_{attn}$ | 注意力输出的维度
dimension of the attention output |
| $n_{heads}$ | 每层注意力头数量
number of attention heads per layer |
| $n_{ctx}$ | 上下文词元数量，除另说明外为1024
input context |&lt;&#x2F;p&gt;
&lt;p&gt;使用$N$代表模型的参数大小，这里定义为除去embedding的参数：&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{aligned} N&amp;amp;\approx 2d_{model}n_{layer}(2d_{attn}+d_{ff}) \ &amp;amp;= 12n_{layer}d^2_{model}\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
d_{attn}=d_{ff}&#x2F;4=d_{model}
$$&lt;&#x2F;p&gt;
&lt;p&gt;这里省去了embedding层的$n_{vocab}d_{model}$和$n_{ctx}d_{model}$参数，向前传递大概需要计算量$C$如下表示：&lt;&#x2F;p&gt;
&lt;p&gt;$$
C_{forward} \approx 2N+2n_{layer}n_{ctx}d_{model}
$$&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;website.jingxiqiu.com&#x2F;zh&#x2F;blog&#x2F;scaling-law&#x2F;Untitled%203.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yan-jie-guo&quot;&gt;实验结果&lt;&#x2F;h3&gt;
&lt;p&gt;实验变量：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;模型大小（非嵌入参数从768个到15亿个不等）&lt;&#x2F;li&gt;
&lt;li&gt;数据集大小（从2200万到230亿个token）&lt;&#x2F;li&gt;
&lt;li&gt;形状（包括深度、宽度、注意力头和前馈维度）&lt;&#x2F;li&gt;
&lt;li&gt;上下文长度（1024，但也会尝试更短的上下文）&lt;&#x2F;li&gt;
&lt;li&gt;批量大小（$2^{19}$，但也会改变它以测量临界批量大小）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;website.jingxiqiu.com&#x2F;zh&#x2F;blog&#x2F;scaling-law&#x2F;Untitled%204.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;website.jingxiqiu.com&#x2F;zh&#x2F;blog&#x2F;scaling-law&#x2F;Untitled%205.png&quot; alt=&quot;Untitled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;结论：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;在非嵌入模型大小$N$固定的情况下模型的形状对性能的影响很小，调整很大也只影响几个百分点&lt;&#x2F;li&gt;
&lt;li&gt;如果计算嵌入的参数大小，那模型的性能和层数有较大关联（左图），但是如果去掉嵌入层的参数大小，则除了小于两层的模型，不同层数模型的性能基本在同一个趋势上（右图）。&lt;&#x2F;li&gt;
&lt;li&gt;在LSTM上同样适用，但是LSTM性能比Transformer差一点&lt;&#x2F;li&gt;
&lt;li&gt;幂律定理公式成立：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;$$
\begin{aligned}
L(N)      &amp;amp;\approx (N_c&#x2F;N)^{\alpha_N} \
L(D)      &amp;amp;\approx (D_c&#x2F;D)^{\alpha_D} \
L(C_{min})&amp;amp;\approx (C_{c}^{min}&#x2F;C_{min})^{\alpha_{min}}
\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;training-compute-optimal-large-language-models&quot;&gt;Training Compute-Optimal Large Language Models&lt;&#x2F;h2&gt;
&lt;h1 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h1&gt;
&lt;p&gt;[1] &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2001.08361.pdf&quot;&gt;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2001.08361.pdf&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;[2] &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2203.15556.pdf&quot;&gt;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2203.15556.pdf&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;[3] &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;espadrine.github.io&#x2F;blog&#x2F;posts&#x2F;chinchilla-s-death.html&quot;&gt;https:&#x2F;&#x2F;espadrine.github.io&#x2F;blog&#x2F;posts&#x2F;chinchilla-s-death.html&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;[4] &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2109.10686.pdf&quot;&gt;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2109.10686.pdf&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;[5] &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;self-supervised.cs.jhu.edu&#x2F;sp2023&#x2F;files&#x2F;17.retrieval-augmentation.pdf&quot;&gt;https:&#x2F;&#x2F;self-supervised.cs.jhu.edu&#x2F;sp2023&#x2F;files&#x2F;17.retrieval-augmentation.pdf&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        <summary type="html">LLM Scaling Laws 论文摘录 - Scaling Laws for Neural Language Models</summary>
        </entry>
</feed>
